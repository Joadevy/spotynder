---
import { SelectPlaylist } from "../components/SelectChangePlaylist";
import {SwipePlayback} from "../components/SwipeCard/SwipePlayback";
import Layout from "../layouts/Layout.astro";
import { supabase } from "../lib/supabase";
import type { PlaylistInformation, PlaylistItem } from "../lib/types";

const { cookies, url, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return redirect("/");
}

const { data, error } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

if (error || !cookies.has('spotify-access-token')) {
  cookies.delete("sb-access-token", {
    path: "/",
  });
  cookies.delete("sb-refresh-token", {
    path: "/",
  });
  cookies.delete("spotify-access-token", {
    path: "/",
  });
  
  return redirect("/");
}

const user = await supabase.auth.getUser()
const isPremium = cookies.get("is-premium")?.value === "true";

// const user = await supabase.auth.getUser()
const spotify_access_token = cookies.get("spotify-access-token")?.value;
const playlist_id = url.searchParams.get("p");

const fetchOptions = {
  headers: {
    'Authorization': `Bearer ${spotify_access_token}`
  }
};

// Obtendriamos las playlist del usuario para que pueda luego cambiar de playlist a la que quiera``
const userPlaylistsPromise:Promise<{items:PlaylistItem[]|null}> = fetch(`https://api.spotify.com/v1/me/playlists`, fetchOptions)
  .then(response => response.json())
  .then(data => {
    if (!data.items) return { items: null };

    const filteredItems = data.items.filter((playlist: PlaylistItem) => 
      playlist.owner.id === user.data.user?.user_metadata.provider_id
    );
    return { items: filteredItems };
  });

const { items: userplaylists } = await userPlaylistsPromise;

if (!userplaylists) {
  return redirect("/");
}
---

<Layout title="Discover">
    <div class="text-white">
      <header class="flex flex-col items-center text-center justify-center mb-4">
        <h1 class="text-gradient">Discover new music</h1>
        <p class="italic -mt-4 lg:-mt-2 text-gray-400 ">Listen to some chunk-songs & add to your playlist if you liked them!</p>
      </header>

      
      <main> 
        <div class="mt-4">
          
          {
            !isPremium ? (
              <header class="flex flex-col gap-2">
                <div class=" bg-tinder-red bg-opacity-75 p-4 rounded-lg text-white text-center">
                  <p class="text-lg">We apologize, but you need to have a premium Spotify account to use this feature. This is a Spotify policy and is not within our control; it's necessary to enable the streaming of content from your account to us.</p>
                </div>
              </header>
            )
            :
            (<SwipePlayback spotify_access_token={spotify_access_token ?? ""} playlist_id={playlist_id!} client:load>
              <SelectPlaylist playlists={userplaylists} playlistIdFromURLParam={playlist_id ?? ""} client:load/>
            </SwipePlayback>
          )}
        </div>
        </main>
    </div>
</Layout>

<style>
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
	}
  @media (max-width: 768px) {
    h1 {
      font-size: 3.5rem;
    }
  }
</style>